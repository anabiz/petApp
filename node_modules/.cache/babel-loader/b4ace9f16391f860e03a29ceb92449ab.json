{"ast":null,"code":"const {\n  animal,\n  animals,\n  breeds,\n  organization,\n  organizations,\n  type,\n  types\n} = require(\"./data\");\n\nconst TIMEOUT = process.env.NODE_ENV === \"test\" ? 1 : 1000;\n\nconst delay = result => new Promise(resolve => setTimeout(() => resolve(result), TIMEOUT));\n\nconst mockLib = {\n  animal: id => delay({\n    animal: animal(id)\n  }),\n  animals: params => delay({\n    animals: animals(params)\n  }),\n  breeds: type => delay({\n    breeds: breeds(type)\n  }),\n  organization: id => delay({\n    organization: organization(id)\n  }),\n  organizations: options => delay({\n    organizations: organizations(options)\n  }),\n  type: slug => delay({\n    type: type(slug)\n  }),\n  types: () => delay({\n    types: types()\n  }),\n  requestLink: url => {\n    const [path, paramsString] = url.split(\"?\");\n    const params = (paramsString ? paramsString : \"\").split(\"&\").map(str => str.split(\"=\")).reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {}); // eslint-disable-next-line no-unused-vars\n\n    const [_, _2, method, id, breeds] = path.split(\"/\");\n\n    switch (method) {\n      case \"types\":\n        if (id) {\n          return mockLib.type(id);\n        } else {\n          return mockLib.types(params);\n        }\n\n      case \"animals\":\n        if (breeds) {\n          return mockLib.breeds(id);\n        } else if (id) {\n          return mockLib.animal(+id);\n        } else {\n          return mockLib.animals(params);\n        }\n\n      case \"organizations\":\n        if (id) {\n          return mockLib.organization(id);\n        } else {\n          return mockLib.organizations(params);\n        }\n\n    }\n  }\n};\nmodule.exports = mockLib;","map":{"version":3,"sources":["/Users/user/Desktop/adoptPet/node_modules/@frontendmasters/pet/mock.js"],"names":["animal","animals","breeds","organization","organizations","type","types","require","TIMEOUT","process","env","NODE_ENV","delay","result","Promise","resolve","setTimeout","mockLib","id","params","options","slug","requestLink","url","path","paramsString","split","map","str","reduce","acc","key","value","_","_2","method","module","exports"],"mappings":"AAAA,MAAM;AACJA,EAAAA,MADI;AAEJC,EAAAA,OAFI;AAGJC,EAAAA,MAHI;AAIJC,EAAAA,YAJI;AAKJC,EAAAA,aALI;AAMJC,EAAAA,IANI;AAOJC,EAAAA;AAPI,IAQFC,OAAO,CAAC,QAAD,CARX;;AAUA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GAAkC,CAAlC,GAAsC,IAAtD;;AAEA,MAAMC,KAAK,GAAGC,MAAM,IAClB,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAAC,MAAMD,OAAO,CAACF,MAAD,CAAd,EAAwBL,OAAxB,CAAjC,CADF;;AAGA,MAAMS,OAAO,GAAG;AACdjB,EAAAA,MAAM,EAAEkB,EAAE,IAAIN,KAAK,CAAC;AAAEZ,IAAAA,MAAM,EAAEA,MAAM,CAACkB,EAAD;AAAhB,GAAD,CADL;AAEdjB,EAAAA,OAAO,EAAEkB,MAAM,IAAIP,KAAK,CAAC;AAAEX,IAAAA,OAAO,EAAEA,OAAO,CAACkB,MAAD;AAAlB,GAAD,CAFV;AAGdjB,EAAAA,MAAM,EAAEG,IAAI,IAAIO,KAAK,CAAC;AAAEV,IAAAA,MAAM,EAAEA,MAAM,CAACG,IAAD;AAAhB,GAAD,CAHP;AAIdF,EAAAA,YAAY,EAAEe,EAAE,IAAIN,KAAK,CAAC;AAAET,IAAAA,YAAY,EAAEA,YAAY,CAACe,EAAD;AAA5B,GAAD,CAJX;AAKdd,EAAAA,aAAa,EAAEgB,OAAO,IAAIR,KAAK,CAAC;AAAER,IAAAA,aAAa,EAAEA,aAAa,CAACgB,OAAD;AAA9B,GAAD,CALjB;AAMdf,EAAAA,IAAI,EAAEgB,IAAI,IAAIT,KAAK,CAAC;AAAEP,IAAAA,IAAI,EAAEA,IAAI,CAACgB,IAAD;AAAZ,GAAD,CANL;AAOdf,EAAAA,KAAK,EAAE,MAAMM,KAAK,CAAC;AAAEN,IAAAA,KAAK,EAAEA,KAAK;AAAd,GAAD,CAPJ;AAQdgB,EAAAA,WAAW,EAAEC,GAAG,IAAI;AAClB,UAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAA7B;AACA,UAAMP,MAAM,GAAG,CAACM,YAAY,GAAGA,YAAH,GAAkB,EAA/B,EACZC,KADY,CACN,GADM,EAEZC,GAFY,CAERC,GAAG,IAAIA,GAAG,CAACF,KAAJ,CAAU,GAAV,CAFC,EAGZG,MAHY,CAGL,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,KAAuB;AAC7BF,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AACA,aAAOF,GAAP;AACD,KANY,EAMV,EANU,CAAf,CAFkB,CASlB;;AACA,UAAM,CAACG,CAAD,EAAIC,EAAJ,EAAQC,MAAR,EAAgBjB,EAAhB,EAAoBhB,MAApB,IAA8BsB,IAAI,CAACE,KAAL,CAAW,GAAX,CAApC;;AACA,YAAQS,MAAR;AACE,WAAK,OAAL;AACE,YAAIjB,EAAJ,EAAQ;AACN,iBAAOD,OAAO,CAACZ,IAAR,CAAaa,EAAb,CAAP;AACD,SAFD,MAEO;AACL,iBAAOD,OAAO,CAACX,KAAR,CAAca,MAAd,CAAP;AACD;;AACH,WAAK,SAAL;AACE,YAAIjB,MAAJ,EAAY;AACV,iBAAOe,OAAO,CAACf,MAAR,CAAegB,EAAf,CAAP;AACD,SAFD,MAEO,IAAIA,EAAJ,EAAQ;AACb,iBAAOD,OAAO,CAACjB,MAAR,CAAe,CAACkB,EAAhB,CAAP;AACD,SAFM,MAEA;AACL,iBAAOD,OAAO,CAAChB,OAAR,CAAgBkB,MAAhB,CAAP;AACD;;AACH,WAAK,eAAL;AACE,YAAID,EAAJ,EAAQ;AACN,iBAAOD,OAAO,CAACd,YAAR,CAAqBe,EAArB,CAAP;AACD,SAFD,MAEO;AACL,iBAAOD,OAAO,CAACb,aAAR,CAAsBe,MAAtB,CAAP;AACD;;AApBL;AAsBD;AAzCa,CAAhB;AA4CAiB,MAAM,CAACC,OAAP,GAAiBpB,OAAjB","sourcesContent":["const {\n  animal,\n  animals,\n  breeds,\n  organization,\n  organizations,\n  type,\n  types\n} = require(\"./data\");\n\nconst TIMEOUT = process.env.NODE_ENV === \"test\" ? 1 : 1000;\n\nconst delay = result =>\n  new Promise(resolve => setTimeout(() => resolve(result), TIMEOUT));\n\nconst mockLib = {\n  animal: id => delay({ animal: animal(id) }),\n  animals: params => delay({ animals: animals(params) }),\n  breeds: type => delay({ breeds: breeds(type) }),\n  organization: id => delay({ organization: organization(id) }),\n  organizations: options => delay({ organizations: organizations(options) }),\n  type: slug => delay({ type: type(slug) }),\n  types: () => delay({ types: types() }),\n  requestLink: url => {\n    const [path, paramsString] = url.split(\"?\");\n    const params = (paramsString ? paramsString : \"\")\n      .split(\"&\")\n      .map(str => str.split(\"=\"))\n      .reduce((acc, [key, value]) => {\n        acc[key] = value;\n        return acc;\n      }, {});\n    // eslint-disable-next-line no-unused-vars\n    const [_, _2, method, id, breeds] = path.split(\"/\");\n    switch (method) {\n      case \"types\":\n        if (id) {\n          return mockLib.type(id);\n        } else {\n          return mockLib.types(params);\n        }\n      case \"animals\":\n        if (breeds) {\n          return mockLib.breeds(id);\n        } else if (id) {\n          return mockLib.animal(+id);\n        } else {\n          return mockLib.animals(params);\n        }\n      case \"organizations\":\n        if (id) {\n          return mockLib.organization(id);\n        } else {\n          return mockLib.organizations(params);\n        }\n    }\n  }\n};\n\nmodule.exports = mockLib;\n"]},"metadata":{},"sourceType":"script"}